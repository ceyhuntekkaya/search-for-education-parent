-- V20250128001__Create_Parent_School_List_Tables.sql
-- Migration for Parent School List Management System

-- ================================ PARENT SCHOOL LISTS TABLE ================================
CREATE TABLE parent_school_lists (
                                     id bigint generated by default as identity primary key,
                                     parent_user_id BIGINT NOT NULL,
                                     list_name VARCHAR(100) NOT NULL,
                                     description TEXT,
                                     status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
                                     is_default BOOLEAN DEFAULT FALSE,
                                     color_code VARCHAR(7),
                                     icon VARCHAR(50),
                                     notes TEXT,
                                     last_accessed_at TIMESTAMP,
                                     school_count INTEGER DEFAULT 0,
                                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Constraints
                                     CONSTRAINT fk_parent_school_lists_parent_user FOREIGN KEY (parent_user_id) REFERENCES users(id) ON DELETE CASCADE,
                                     CONSTRAINT chk_parent_school_lists_status CHECK (status IN ('ACTIVE', 'ARCHIVED', 'DELETED')),
                                     CONSTRAINT chk_parent_school_lists_school_count CHECK (school_count >= 0)
);

-- Indexes for parent_school_lists
CREATE INDEX idx_parent_school_lists_parent_user_id ON parent_school_lists(parent_user_id);
CREATE INDEX idx_parent_school_lists_status ON parent_school_lists(status);
CREATE INDEX idx_parent_school_lists_is_default ON parent_school_lists(is_default);
CREATE INDEX idx_parent_school_lists_last_accessed_at ON parent_school_lists(last_accessed_at DESC);
CREATE UNIQUE INDEX idx_parent_school_lists_parent_user_list_name ON parent_school_lists(parent_user_id, list_name) WHERE status = 'ACTIVE';

-- ================================ PARENT SCHOOL LIST ITEMS TABLE ================================
CREATE TABLE parent_school_list_items (
                                          id bigint generated by default as identity primary key,
                                          parent_school_list_id BIGINT NOT NULL,
                                          school_id BIGINT NOT NULL,
                                          star_rating INTEGER,
                                          status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
                                          is_favorite BOOLEAN DEFAULT FALSE,
                                          is_blocked BOOLEAN DEFAULT FALSE,
                                          priority_order INTEGER DEFAULT 0,
                                          personal_notes TEXT,
                                          pros TEXT,
                                          cons TEXT,
                                          tags VARCHAR(200),
                                          visit_planned_date TIMESTAMP,
                                          visit_completed_date TIMESTAMP,
                                          last_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                          added_from_search VARCHAR(255),
                                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Constraints
                                          CONSTRAINT fk_parent_school_list_items_list FOREIGN KEY (parent_school_list_id) REFERENCES parent_school_lists(id) ON DELETE CASCADE,
                                          CONSTRAINT fk_parent_school_list_items_school FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE,
                                          CONSTRAINT chk_parent_school_list_items_status CHECK (status IN ('ACTIVE', 'REMOVED', 'BLOCKED')),
                                          CONSTRAINT chk_parent_school_list_items_star_rating CHECK (star_rating IS NULL OR (star_rating >= 1 AND star_rating <= 5)),
                                          CONSTRAINT uq_parent_school_list_items_list_school UNIQUE (parent_school_list_id, school_id)
);

-- Indexes for parent_school_list_items
CREATE INDEX idx_parent_school_list_items_list_id ON parent_school_list_items(parent_school_list_id);
CREATE INDEX idx_parent_school_list_items_school_id ON parent_school_list_items(school_id);
CREATE INDEX idx_parent_school_list_items_status ON parent_school_list_items(status);
CREATE INDEX idx_parent_school_list_items_is_favorite ON parent_school_list_items(is_favorite);
CREATE INDEX idx_parent_school_list_items_is_blocked ON parent_school_list_items(is_blocked);
CREATE INDEX idx_parent_school_list_items_star_rating ON parent_school_list_items(star_rating);
CREATE INDEX idx_parent_school_list_items_priority_order ON parent_school_list_items(priority_order);
CREATE INDEX idx_parent_school_list_items_visit_planned_date ON parent_school_list_items(visit_planned_date);
CREATE INDEX idx_parent_school_list_items_visit_completed_date ON parent_school_list_items(visit_completed_date);
CREATE INDEX idx_parent_school_list_items_created_at ON parent_school_list_items(created_at DESC);

-- ================================ PARENT SCHOOL NOTES TABLE ================================
CREATE TABLE parent_school_notes (
                                     id bigint generated by default as identity primary key,
                                     parent_school_list_item_id BIGINT,
                                     school_id BIGINT NOT NULL,
                                     note_title VARCHAR(200),
                                     note_content TEXT NOT NULL,
                                     category VARCHAR(30) DEFAULT 'GENERAL',
                                     is_important BOOLEAN DEFAULT FALSE,
                                     reminder_date TIMESTAMP,
                                     source VARCHAR(100),
                                     attachment_url VARCHAR(500),
                                     attachment_name VARCHAR(255),
                                     attachment_size BIGINT,
                                     attachment_type VARCHAR(100),
                                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Constraints
                                     CONSTRAINT fk_parent_school_notes_list_item FOREIGN KEY (parent_school_list_item_id) REFERENCES parent_school_list_items(id) ON DELETE CASCADE,
                                     CONSTRAINT fk_parent_school_notes_school FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE,
                                     CONSTRAINT chk_parent_school_notes_category CHECK (category IN (
                                                                                                     'GENERAL', 'ACADEMIC', 'FACILITIES', 'FEES', 'TEACHERS',
                                                                                                     'EXTRACURRICULAR', 'TRANSPORTATION', 'VISIT_NOTES',
                                                                                                     'PHONE_CALL', 'MEETING', 'APPOINTMENT'
                                         )),
                                     CONSTRAINT chk_parent_school_notes_attachment_size CHECK (attachment_size IS NULL OR attachment_size > 0)
);

-- Indexes for parent_school_notes
CREATE INDEX idx_parent_school_notes_list_item_id ON parent_school_notes(parent_school_list_item_id);
CREATE INDEX idx_parent_school_notes_school_id ON parent_school_notes(school_id);
CREATE INDEX idx_parent_school_notes_category ON parent_school_notes(category);
CREATE INDEX idx_parent_school_notes_is_important ON parent_school_notes(is_important);
CREATE INDEX idx_parent_school_notes_reminder_date ON parent_school_notes(reminder_date);
CREATE INDEX idx_parent_school_notes_created_at ON parent_school_notes(created_at DESC);

-- ================================ PARENT LIST NOTES TABLE ================================
CREATE TABLE parent_list_notes (
                                   id bigint generated by default as identity primary key,
                                   parent_school_list_id BIGINT NOT NULL,
                                   note_title VARCHAR(200),
                                   note_content TEXT NOT NULL,
                                   is_important BOOLEAN DEFAULT FALSE,
                                   reminder_date TIMESTAMP,
                                   attachment_url VARCHAR(500),
                                   attachment_name VARCHAR(255),
                                   attachment_size BIGINT,
                                   attachment_type VARCHAR(100),
                                   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                   updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Constraints
                                   CONSTRAINT fk_parent_list_notes_list FOREIGN KEY (parent_school_list_id) REFERENCES parent_school_lists(id) ON DELETE CASCADE,
                                   CONSTRAINT chk_parent_list_notes_attachment_size CHECK (attachment_size IS NULL OR attachment_size > 0)
);

-- Indexes for parent_list_notes
CREATE INDEX idx_parent_list_notes_list_id ON parent_list_notes(parent_school_list_id);
CREATE INDEX idx_parent_list_notes_is_important ON parent_list_notes(is_important);
CREATE INDEX idx_parent_list_notes_reminder_date ON parent_list_notes(reminder_date);
CREATE INDEX idx_parent_list_notes_created_at ON parent_list_notes(created_at DESC);

-- ================================ TRIGGERS FOR UPDATED_AT ================================

-- Trigger function for updating updated_at column
CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply triggers to all tables
CREATE TRIGGER update_parent_school_lists_updated_at
    BEFORE UPDATE ON parent_school_lists
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_parent_school_list_items_updated_at
    BEFORE UPDATE ON parent_school_list_items
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_parent_school_notes_updated_at
    BEFORE UPDATE ON parent_school_notes
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_parent_list_notes_updated_at
    BEFORE UPDATE ON parent_list_notes
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ================================ SAMPLE DATA (OPTIONAL) ================================

-- Insert sample data for testing (uncomment if needed)
/*
-- Sample parent school list
INSERT INTO parent_school_lists (parent_user_id, list_name, description, is_default, color_code, icon)
VALUES
    (1, 'Favorilerim', 'İlgilendiğim okulların listesi', TRUE, '#2563eb', 'heart'),
    (1, 'Araştırdıklarım', 'Detaylı araştırma yaptığım okullar', FALSE, '#059669', 'search'),
    (2, 'Favorilerim', 'Beğendiğim okullar', TRUE, '#dc2626', 'star');

-- Sample list items (assuming schools with IDs 1, 2, 3 exist)
INSERT INTO parent_school_list_items (parent_school_list_id, school_id, star_rating, is_favorite, personal_notes)
VALUES
    (1, 1, 5, TRUE, 'Çok beğendiğim bir okul, kesinlikle ziyaret edilmeli'),
    (1, 2, 4, TRUE, 'İyi bir seçenek, fiyat biraz yüksek'),
    (2, 3, 3, FALSE, 'Orta seviye, daha fazla araştırma gerekli');

-- Sample school notes
INSERT INTO parent_school_notes (parent_school_list_item_id, school_id, note_title, note_content, category, is_important)
VALUES
    (1, 1, 'Okul Ziyareti', 'Okulu ziyaret ettim, çok beğendim. Özellikle fen laboratuvarları çok iyi donanımlı.', 'VISIT_NOTES', TRUE),
    (2, 2, 'Ücret Bilgileri', 'Yıllık ücret 50.000 TL, kayıt ücreti 5.000 TL', 'FEES', FALSE);

-- Sample list notes
INSERT INTO parent_list_notes (parent_school_list_id, note_title, note_content, is_important)
VALUES
    (1, 'Genel Not', 'Bu listedeki okulları öncelik sırasına göre ziyaret etmeyi planlıyorum.', FALSE),
    (2, 'Araştırma Planı', 'Her okul için en az 2 saat araştırma yapacağım.', TRUE);
*/

-- ================================ COMMENTS ================================
